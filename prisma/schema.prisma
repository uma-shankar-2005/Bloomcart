// BloomCart E-Commerce Database Schema
// Flower & DÃ©cor E-Commerce Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String?
  role          UserRole  @default(CUSTOMER)
  emailVerified DateTime?
  image         String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  addresses     Address[]
  events        Event[]
  reviews       Review[]
  cartItems     CartItem[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Partner Management
model Partner {
  id             String   @id @default(cuid())
  floristName    String
  businessName   String?
  email          String   @unique
  phone          String
  city           String
  state          String
  pincode        String
  address        String
  commissionRate Float    @default(0.1) // 10% default commission
  isActive       Boolean  @default(true)
  rating         Float    @default(0)
  totalOrders    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  products       Product[]
  orders         Order[]

  @@map("partners")
}

// Product Management
model Product {
  id          String        @id @default(cuid())
  name        String
  description String        @db.Text
  price       Float
  originalPrice Float?
  type        ProductType
  category    String
  occasion    String[]
  stock       Int           @default(0)
  isActive    Boolean       @default(true)
  isFeatured  Boolean       @default(false)
  rating      Float         @default(0)
  reviewCount Int           @default(0)
  partnerId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  partner     Partner       @relation(fields: [partnerId], references: [id])
  images      ProductImage[]
  orderItems  OrderItem[]
  reviews     Review[]
  cartItems   CartItem[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  isPrimary Boolean @default(false)
  order     Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Order Management
model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  userId        String
  partnerId     String?
  totalPrice    Float
  subtotal      Float
  tax           Float         @default(0)
  shipping      Float         @default(0)
  discount      Float         @default(0)
  paymentStatus PaymentStatus @default(PENDING)
  deliveryStatus DeliveryStatus @default(PENDING)
  paymentMethod String?
  paymentId     String?
  notes         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user          User          @relation(fields: [userId], references: [id])
  partner       Partner?      @relation(fields: [partnerId], references: [id])
  items         OrderItem[]
  address       Address?
  tracking      OrderTracking[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float   // Price at time of order
  name      String  // Product name at time of order

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderTracking {
  id          String    @id @default(cuid())
  orderId     String
  status      String
  description String?
  location    String?
  timestamp   DateTime  @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_tracking")
}

// Address Management
model Address {
  id          String   @id @default(cuid())
  userId      String
  orderId     String?  @unique
  type        AddressType @default(DELIVERY)
  name        String
  phone       String
  address     String
  city        String
  state       String
  pincode     String
  country     String   @default("India")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("addresses")
}

// Shopping Cart
model CartItem {
  id        String  @id @default(cuid())
  userId    String
  productId String
  quantity  Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

// Event Booking
model Event {
  id            String      @id @default(cuid())
  userId        String
  title         String
  description   String?     @db.Text
  eventDate     DateTime
  eventTime     String
  duration      Int?        // in hours
  guestCount    Int?
  location      String
  packageType   String
  totalPrice    Float
  status        EventStatus @default(PENDING)
  notes         String?     @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("events")
}

// Reviews & Ratings
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  orderId   String?
  rating    Int      // 1-5 stars
  title     String?
  comment   String?  @db.Text
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

// Enums
enum UserRole {
  CUSTOMER
  PARTNER
  ADMIN
}

enum ProductType {
  FRESH_FLOWERS
  DRIED_FLOWERS
  ARTIFICIAL_FLOWERS
  DECOR_ITEMS
  EVENT_PACKAGES
  CUSTOM_BOUQUETS
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  CONFIRMED
  PACKED
  DISPATCHED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  RETURNED
}

enum AddressType {
  HOME
  OFFICE
  DELIVERY
  BILLING
}

enum EventStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
